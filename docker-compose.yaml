version: "3.8"

services:
  redis:
    build: ./init/redis
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: P@ssw0rd
      MONGO_INITDB_DATABASE: university
    volumes:
      - mongodb_data:/data/db
      - ./logs/mongodb:/var/log/mongodb
      - ./config/mongod.conf:/etc/mongod.conf
      - ./init/mongodb:/docker-entrypoint-initdb.d
      - ./config/mongod.conf:/etc/mongod.conf
    command: 
      - mongod
      - --auth
      - --bind_ip_all
      - --config=/etc/mongod.conf
    healthcheck:
      test: |
        mongosh --quiet --eval '
          db.getSiblingDB("admin").auth("admin", "P@ssw0rd");
          db.adminCommand("ping")
        '
      interval: 15s
      timeout: 10s
      retries: 3
    

  mongo-init:
    image: mongo:7.0
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./init/mongodb:/scripts
    command: >
      bash -c "
            until mongosh --host mongodb -u admin -p P@ssw0rd --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")'; do
              sleep 1
            done
            mongosh --host mongodb -u admin -p P@ssw0rd --authenticationDatabase admin --file /scripts/init-mongodb.js
            "
    restart: on-failure

  neo4j:
    image: neo4j:5.16-community
    container_name: neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/P@ssw0rd
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_logs_debug_level: INFO
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./logs/neo4j:/logs
      - ./init/neo4j:/var/lib/neo4j/import
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "neo4j", "-p", "P@ssw0rd", "RETURN 1" ]
      interval: 20s
      timeout: 15s
      retries: 3

  elasticsearch:
    image: elasticsearch:7.17.10
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./logs/elasticsearch:/usr/share/elasticsearch/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 20s
      retries: 5

  init-es:
    image: alpine:3.17
    container_name: init-es
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./init/elasticsearch:/init
    entrypoint: /bin/sh
    command: [ "-c", "apk add --no-cache curl && chmod +x /init/init-es.sh && sleep 3 && sh /init/init-es.sh" ]

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: P@ssw0rd
      POSTGRES_DB: university
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
      - ./init/postgres:/docker-entrypoint-initdb.d
    command: >
      sh -c "
      mkdir -p /var/log/postgresql &&
      chown postgres:postgres /var/log/postgresql &&
      exec docker-entrypoint.sh postgres 
      -c log_destination=stderr 
      -c logging_collector=on 
      -c log_directory='/var/log/postgresql' 
      -c log_filename='postgresql-%Y-%m-%d.log' 
      -c log_rotation_age=1d 
      -c log_rotation_size=0
      "
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d university" ]
      interval: 15s
      timeout: 10s
      retries: 3

  api_gateway:
    build:
      context: ./app_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      JWT_SECRET: ${JWT_SECRET}
      APP1_URL: ${APP1_URL}
      APP2_URL: ${APP2_URL}
      TOKEN_EXPIRE_MINUTES: ${TOKEN_EXPIRE_MINUTES}
      API_USERS: '${API_USERS}'

  app_1:
    build:
      context: ./app_1
      dockerfile: Dockerfile
    container_name: app1_service
    restart: unless-stopped
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGO_DSN=${MONGO_DSN}
      - JWT_SECRET= ${JWT_SECRET}
      - APP1_URL= ${APP1_URL}
      - TOKEN_EXPIRE_MINUTES= ${TOKEN_EXPIRE_MINUTES}
      - APP1_TOKEN= ${APP1_TOKEN}
      - API_USERS= ${API_USERS}
      - POSTGRES_DSN= ${POSTGRES_DSN}
      - ES_HOST= ${ES_HOST}
      - REDIS_DSN= ${REDIS_DSN}

  app_2:
    build:
      context: ./app_2
      dockerfile: Dockerfile
    container_name: app2_service
    restart: unless-stopped
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      APP2_URL: ${APP2_URL}
      TOKEN_EXPIRE_MINUTES: ${TOKEN_EXPIRE_MINUTES}
      APP1_TOKEN: ${APP1_TOKEN}
      API_USERS: '${API_USERS}'
      POSTGRES_DSN: ${POSTGRES_DSN}
      ES_HOST: ${ES_HOST}
      REDIS_DSN: ${REDIS_DSN}
      NEO4J_URI: "neo4j://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "P@ssw0rd"

  app_3:
    build:
      context: ./app_3
      dockerfile: Dockerfile
    container_name: app3_service
    restart: unless-stopped
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      APP2_URL: ${APP2_URL}
      TOKEN_EXPIRE_MINUTES: ${TOKEN_EXPIRE_MINUTES}
      APP1_TOKEN: ${APP1_TOKEN}
      API_USERS: '${API_USERS}'
      POSTGRES_DSN: ${POSTGRES_DSN}
      ES_HOST: ${ES_HOST}
      REDIS_DSN: ${REDIS_DSN}
      NEO4J_URI: "neo4j://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "P@ssw0rd"

volumes:
  redis_data:
  mongodb_data:
  neo4j_data:
  neo4j_logs:
  elasticsearch_data:
  postgres_data: